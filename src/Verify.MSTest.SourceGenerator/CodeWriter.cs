namespace Verify.MSTest.SourceGenerator;

static class CodeWriter
{
    private static readonly string AutoGenerationHeader = """
        //-----------------------------------------------------
        // This code was generated by a tool.
        //
        // Changes to this file may cause incorrect behavior
        // and will be lost when the code is regenerated.
        // <auto-generated />
        //-----------------------------------------------------
        """;

    private static readonly string GeneratedCodeAttribute =
        $"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"{typeof(CodeWriter).Assembly.GetName().Name}\", \"{typeof(CodeWriter).Assembly.GetName().Version}\")]";

    private static void WriteNamespace(IndentedStringBuilder sb, ClassToGenerate classToGenerate)
    {
        if (classToGenerate.Namespace is not null)
        {
            sb.AppendLine(["namespace ", classToGenerate.Namespace])
              .AppendLine("{")
              .IncreaseIndent();
        }

        WriteParentTypes(sb, classToGenerate);

        if (classToGenerate.Namespace is not null)
        {
            sb.DecreaseIndent()
              .AppendLine("}");
        };
    }

    private static void WriteParentTypes(IndentedStringBuilder sb, ClassToGenerate classToGenerate)
    {
        foreach (var parentClass in classToGenerate.ParentClasses)
        {
            sb.AppendLine(["partial ", parentClass.Keyword, " ", parentClass.Name])
              .AppendLine("{");

            sb.IncreaseIndent();
        }

        WriteClass(sb, classToGenerate);

        foreach (var parentClass in classToGenerate.ParentClasses)
        {
            sb.DecreaseIndent()
              .AppendLine("}");
        }
    }

    private static void WriteClass(IndentedStringBuilder sb, ClassToGenerate classToGenerate)
    {
        // TODO: Update to put all generated classes in the same file

        var genericConstraints = string.Empty;

        if (classToGenerate.TypeParameters.Count > 0)
        {
            // TODO: Reimplement for perf
            genericConstraints = $"<{string.Join(", ", classToGenerate.TypeParameters)}>";
        }

        sb.AppendLine(GeneratedCodeAttribute)
          .AppendLine($"partial class {classToGenerate.ClassName}{genericConstraints}") // TODO: Reimplement for perf
          .AppendLine("{")
          .AppendLine("    public TestContext TestContext")
          .AppendLine("    {")
          .AppendLine("        get => CurrentTestContext.Value!;")
          .AppendLine("        set => CurrentTestContext.Value = value;")
          .AppendLine("    }")
          .AppendLine("}");
    }

    public static string GenerateExtensionClasses(IReadOnlyCollection<ClassToGenerate> classesToGenerate)
    {
        var sb = new IndentedStringBuilder();

        sb.AppendLine(AutoGenerationHeader);

        foreach (var classToGenerate in classesToGenerate)
        {
            sb.AppendLine();
            WriteNamespace(sb, classToGenerate);
        }

        return sb.ToString();
    }
}
