namespace VerifyMSTest.SourceGenerator;

static class Emitter
{
    private static readonly string AutoGenerationHeader = """
        //-----------------------------------------------------
        // This code was generated by a tool.
        //
        // Changes to this file may cause incorrect behavior
        // and will be lost when the code is regenerated.
        // <auto-generated />
        //-----------------------------------------------------
        """;

    private static readonly string GeneratedCodeAttribute =
        $"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"{typeof(Emitter).Assembly.GetName().Name}\", \"{typeof(Emitter).Assembly.GetName().Version}\")]";

    private static readonly IndentedStringBuilder IndentedStringBuilder = new();

    private static void WriteNamespace(IndentedStringBuilder sb, ClassToGenerate classToGenerate)
    {
        if (classToGenerate.Namespace is not null)
        {
            sb.Append("namespace ").AppendLine(classToGenerate.Namespace)
              .AppendLine("{")
              .IncreaseIndent();
        }

        WriteParentTypes(sb, classToGenerate);

        if (classToGenerate.Namespace is not null)
        {
            sb.DecreaseIndent()
              .AppendLine("}");
        };
    }

    private static void WriteParentTypes(IndentedStringBuilder sb, ClassToGenerate classToGenerate)
    {
        foreach (var parentClass in classToGenerate.ParentClasses)
        {
            sb.Append("partial ").Append(parentClass.Keyword).Append(" ").AppendLine(parentClass.Name)
              .AppendLine("{");

            sb.IncreaseIndent();
        }

        WriteClass(sb, classToGenerate);

        foreach (var parentClass in classToGenerate.ParentClasses)
        {
            sb.DecreaseIndent()
              .AppendLine("}");
        }
    }

    private static void WriteClass(IndentedStringBuilder sb, ClassToGenerate classToGenerate) =>
        sb.AppendLine(GeneratedCodeAttribute)
          .Append("partial class ").AppendLine(classToGenerate.ClassName)
          .AppendLine("{")
          .AppendLine("    public TestContext TestContext")
          .AppendLine("    {")
          .AppendLine("        get => Verifier.CurrentTestContext.Value!;")
          .AppendLine("        set => Verifier.CurrentTestContext.Value = value;")
          .AppendLine("    }")
          .AppendLine("}");

    public static string GenerateExtensionClasses(IReadOnlyCollection<ClassToGenerate> classesToGenerate)
    {
        IndentedStringBuilder.Clear();
        IndentedStringBuilder.AppendLine(AutoGenerationHeader);

        foreach (var classToGenerate in classesToGenerate)
        {
            IndentedStringBuilder.AppendLine();
            WriteNamespace(IndentedStringBuilder, classToGenerate);
        }

        return IndentedStringBuilder.ToString();
    }
}
