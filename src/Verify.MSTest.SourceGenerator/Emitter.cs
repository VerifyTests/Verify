using PropertyFlags = ClassToGenerate.PropertyFlags;

class Emitter
{
    const string autoGenerationHeader =
        """
        //-----------------------------------------------------
        // This code was generated by a tool.
        //
        // Changes to this file may cause incorrect behavior
        // and will be lost when the code is regenerated.
        // <auto-generated />
        //-----------------------------------------------------
        """;

    const string setVerifierTestContext =
        "global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());";

    static readonly string generatedCodeAttribute =
        $"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"{typeof(Emitter).Assembly.GetName().Name}\", \"{typeof(Emitter).Assembly.GetName().Version}\")]";

    StringBuilder builder = new(4096);

    void WriteNamespace(ClassToGenerate toGenerate)
    {
        if (toGenerate.Namespace is not null)
        {
            builder.AppendLine(
                $$"""
                  namespace {{toGenerate.Namespace}}
                  {
                  """);
        }

        WriteParentTypes(toGenerate);
        if (toGenerate.Namespace is not null)
        {
            builder.AppendLine("}");
        }
    }

    void WriteParentTypes(ClassToGenerate classToGenerate)
    {
        foreach (var parentClass in classToGenerate.ParentClasses)
        {
            builder.AppendLine(
                $$"""
                  partial {{parentClass.Keyword}} {{parentClass.Name}}
                  {
                  """);
        }

        WriteClass(classToGenerate);

        foreach (var _ in classToGenerate.ParentClasses)
        {
            builder.AppendLine("}");
        }
    }

    void WriteClass(ClassToGenerate toGenerate)
    {
        builder.AppendLine(
            $$"""
              partial class {{toGenerate.ClassName}}
              {
              """);
        AppendGetter(toGenerate.TestContextPropertyFlags);
        AppendSetter(toGenerate.TestContextPropertyFlags);
        builder.AppendLine(
            """
              }
            }
            """);
    }

    public string GenerateExtensionClasses(IEnumerable<ClassToGenerate> classes, Cancel cancel)
    {
        builder.AppendLine(autoGenerationHeader);

        foreach (var toGenerate in classes)
        {
            cancel.ThrowIfCancellationRequested();

            builder.AppendLine();
            WriteNamespace(toGenerate);
        }

        return builder.ToString();
    }

    void AppendGetter(PropertyFlags flags) =>
        builder.AppendLine(
            $$"""
                {{generatedCodeAttribute}}
                public {{GetModifiers(flags)}}global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
                {
                  get => {{GetterBody(flags)}}
              """);

    void AppendSetter(PropertyFlags flags)
    {
        if (flags.HasFlag(PropertyFlags.CallBase))
        {
            AppendCallBaseSetter();
        }
        else
        {
            AppendDefaultSetter();
        }
    }

    void AppendDefaultSetter() =>
        builder.AppendLine($"    set => {setVerifierTestContext}");

    void AppendCallBaseSetter() =>
        builder.AppendLine(
            $$"""
                  set
                  {
                    {{setVerifierTestContext}}
                    base.TestContext = value;
                  }
              """);

    static string GetterBody(PropertyFlags flags) =>
        flags.HasFlag(PropertyFlags.CallBase)
            ? "base.TestContext;"
            : "global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;";

    static string GetModifiers(PropertyFlags flags) =>
        flags.HasFlag(PropertyFlags.Override)
            ? "sealed override "
            : string.Empty;
}