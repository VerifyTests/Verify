using PropertyFlags = ClassToGenerate.PropertyFlags;

class Emitter
{
    const string AutoGenerationHeader = """
    //-----------------------------------------------------
    // This code was generated by a tool.
    //
    // Changes to this file may cause incorrect behavior
    // and will be lost when the code is regenerated.
    // <auto-generated />
    //-----------------------------------------------------
    """;

    const string SetVerifierTestContext =
        "global::VerifyMSTest.Verifier.CurrentTestContext.Value = new global::VerifyMSTest.TestExecutionContext(value, GetType());";

    static readonly string GeneratedCodeAttribute =
        $"[global::System.CodeDom.Compiler.GeneratedCodeAttribute(\"{typeof(Emitter).Assembly.GetName().Name}\", \"{typeof(Emitter).Assembly.GetName().Version}\")]";

    readonly IndentedStringBuilder builder = new();

    void WriteNamespace(ClassToGenerate classToGenerate)
    {
        if (classToGenerate.Namespace is not null)
        {
            builder.Append("namespace ").AppendLine(classToGenerate.Namespace)
              .AppendLine("{")
              .IncreaseIndent();
        }

        WriteParentTypes(classToGenerate);

        if (classToGenerate.Namespace is not null)
        {
            builder.DecreaseIndent()
              .AppendLine("}");
        }
    }

    void WriteParentTypes(ClassToGenerate classToGenerate)
    {
        foreach (var parentClass in classToGenerate.ParentClasses)
        {
            builder.Append("partial ").Append(parentClass.Keyword).Append(" ").AppendLine(parentClass.Name)
              .AppendLine("{");

            builder.IncreaseIndent();
        }

        WriteClass(classToGenerate);

        foreach (var _ in classToGenerate.ParentClasses)
        {
            builder.DecreaseIndent()
              .AppendLine("}");
        }
    }

    void WriteClass(ClassToGenerate classToGenerate)
    {
        builder.Append("partial class ").AppendLine(classToGenerate.ClassName)
            .AppendLine("{")
                .IncreaseIndent();
        AppendTestContextProperty(
            classToGenerate.TestContextPropertyFlags);
        builder
                .DecreaseIndent()
            .AppendLine("}");
    }

    public string GenerateExtensionClasses(IReadOnlyCollection<ClassToGenerate> classesToGenerate, Cancel cancel)
    {
        builder.AppendLine(AutoGenerationHeader);

        foreach (var classToGenerate in classesToGenerate)
        {
            cancel.ThrowIfCancellationRequested();

            builder.AppendLine();
            WriteNamespace(classToGenerate);
        }

        return builder.ToString();
    }

    public void AppendTestContextProperty(PropertyFlags flags)
    {
        builder.AppendLine(GeneratedCodeAttribute)
                .Append("public ")
                .Append(GetModifiers(flags))
                .AppendLine("global::Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext")
                .AppendLine("{")
                    .IncreaseIndent()
                    .Append($"get => ").AppendLine(GetterBody(flags));
        AppendSetter(flags);
        builder
                    .DecreaseIndent()
                .AppendLine("}");
    }

    void AppendSetter(PropertyFlags flags)
    {
        if (flags.HasFlag(PropertyFlags.CallBase))
        {
            AppendCallBaseSetter();
        }
        else
        {
            AppendDefaultSetter();
        }
    }

    void AppendDefaultSetter() =>
        builder
            .Append("set => ").AppendLine(SetVerifierTestContext);

    private void AppendCallBaseSetter() =>
        builder
            .AppendLine("set")
            .AppendLine("{")
                .IncreaseIndent()
                .AppendLine(SetVerifierTestContext)
                .AppendLine("base.TestContext = value;")
                .DecreaseIndent()
            .AppendLine("}");

    static string GetterBody(PropertyFlags flags) =>
        flags.HasFlag(PropertyFlags.CallBase)
            ? "base.TestContext;"
            : "global::VerifyMSTest.Verifier.CurrentTestContext.Value!.TestContext;";

    static string GetModifiers(PropertyFlags flags) =>
        flags.HasFlag(PropertyFlags.Override)
            ? "sealed override "
            : string.Empty;
}
